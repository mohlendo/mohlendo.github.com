<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>Manuel Ohlendorf</title>
    <link>http://www.manuel-ohlendorf.de/blog</link>
    <description>Manuel Ohlendorf writing about something</description>
    <pubDate>Sat, 03 Dec 2011 18:49:30 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>L-System parser with Jangaroo</title>
      <link>http://www.manuel-ohlendorf.de/blog/2011/12/03/lsystem-parser-with-jangaroo</link>
      <pubDate>Sat, 03 Dec 2011 16:44:21 CET</pubDate>
      <category><![CDATA[software]]></category>
      <guid>b'DLnK2acpXGUd8-JB9xTHtym4jTQ='</guid>
      <description>L-System parser with Jangaroo</description>
      <content:encoded><![CDATA[
<p>Have you ever heard of <a href="http://www.jangaroo.net">Jangaroo</a>? It is an ActionScript&reg;-to-Javascript compiler. It's an open-source project with an implementation of the Flash&reg; API and the whole toolchain every programmer likes: Maven dependency management, good IDE support, TDD with JooUnit (a port of FlexUnit) and a lot more. It even comes with a declarative UI language EXML (well, it is quite similar to MXML), that can be used to generate <a href="http://www.sencha.com/products/extjs/">ExtJS</a> applications. For about a year I am now also helping to evolve Jangaroo and its toolchain.</p>
<p>Once upon the time when Adobe&reg; Flex was the next big thing, I was very much impressed by this cool technology. I developed an UI during a professional project with Flex 3 and was a beta tester for Adobe&reg; Flex 4 and all the tools that came with it like FlexBuilder and Thermo. Back then I wrote a little <a href="http://en.wikipedia.org/wiki/L-system">Lindenmayer system</a> parser with a Flex 4 UI: <a href="https://github.com/mohlendo/lsystem">lsystem</a>.</p>
<p>Below you see some <a href="http://en.wikipedia.org/wiki/L-system">Lindenmayer systems</a> that are generated with the Jangaroo version of the original Flash&reg; lsystem parser. It is still the same code, but the program now completely runs in the browser &ndash; without any plugin and only with HTML5. The code can be found here: <a href="https://github.com/mohlendo/lsystem-jangaroo">lsystem-jangaroo</a>.</p>

<iframe id="lsystem1" src="/jangaroo/lsystem/lsystem.html?lsystem=1" frameborder="0" width="640" height="480">
    no frames
</iframe>
<iframe id="lsystem2" src="/jangaroo/lsystem/lsystem.html?lsystem=2" frameborder="0" width="640" height="480">
    no frames
</iframe>
<p>All in all there are 10 Lsystem presets that can be viewed with my litte program:
  <ul>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=0" target="_blank">Lsystema vulgaris</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=1" target="_blank">Tree 1</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=2" target="_blank">Tree 2</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=3" target="_blank">Tree 3</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=4" target="_blank">Koch curve</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=5" target="_blank">Quad Koch island</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=6" target="_blank">Hilber curve</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=7" target="_blank">Sierpinski Arrowhead</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=8" target="_blank">Dragon curve</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=9" target="_blank">LÃ©vy C curve</a></li>
    <li><a href="/jangaroo/lsystem/lsystem.html?lsystem=10" target="_blank">Penrose Tiling P3</a> Warning! This may crash your browser!</li>
  </ul>
</p>

]]></content:encoded>
    </item>
    <item>
      <title>Hosting a Blogofile Blog on GitHub with GitHub Pages</title>
      <link>http://www.manuel-ohlendorf.de/blog/2010/12/23/hosting-a-blogofile-blog-on-github-with-github-pages</link>
      <pubDate>Thu, 23 Dec 2010 13:09:03 CET</pubDate>
      <category><![CDATA[software]]></category>
      <guid>b'Pfm-AFlXnD6s5oje4skR6gQ8P-Y='</guid>
      <description>Hosting a Blogofile Blog on GitHub with GitHub Pages</description>
      <content:encoded><![CDATA[<p>So, in my first blog post I will describe howto use <a href="http://www.github.com">GitHub</a> to serve a <a href="http://www.blogofile.com">Blogofile</a> Blog, which I have done with this blog.</p>
<h3>First, what is <a href="http://www.blogofile.com">Blogofile</a>?</h3>
<p>Blogofile is a framework for static websites. You don't need a webserver and no database, only webspace. 
Blogofile provides templates, controllers and filters, almost like any other dynamic web frameworks and compiles them to a static website.
Right now it is more or less a blogging engine but you can actually create any website you want.
Have a look at the website for details.</p>
<p>And there comes <a href="http://www.github.com">GitHub</a> into the play. <a href="http://www.github.com">GitHub</a>
provides with <a href="http://pages.github.com/">GitHub Pages</a> a very simple way of publishing content to the web. 
So why not using <a href="http://www.github.com">GitHub</a> for serving your blogofile website.</p>
<h3>Github setup</h3>
<p>You need 2 public repositories for that, the source code repository and the website repository that contains the compiled pages. My two repos are:</p>
<ul>
<li><a href="http://github.com/mohlendo/manuel-ohlendorf.de">http://github.com/mohlendo/manuel-ohlendorf.de</a> with the source code</li>
<li><a href="http://github.com/mohlendo/mohlendo.github.com">http://github.com/mohlendo/mohlendo.github.com</a> with the compiled HTML files</li>
</ul>
<p>The later one is a special repository for user pages published with <a href="http://pages.github.com/">GitHub Pages</a>.</p>
<h3>Git setup</h3>
<p>The whole source code of your website with the Mako templates etc. will be pushed to the source code repository.
The command <code>blogofile build</code> compiles the website into the sub-folder <code>_site</code>. 
The contents of this directory is what we want to push to the website repository which GitHub will publish to the web. In order to do that we 
need to create a git <a href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html">submodule</a> with the command:</p>
<pre><code>git submodule add http://github.com/mohlendo/mohlendo.github.com _site
</code></pre>
<p>That creates a new submodule <code>_site</code>. Now everytime the site is rebuild, you can commit and push the changes to the website repository and github 
will automatically publish them - in my case to <a href="http://mohlendo.github.com">http://mohlendo.github.com</a></p>
<h3>_config.py changes</h3>
<p>Every time blogofile recreates the website it completely clears the <code>_site</code> directory 
and therefor also the <code>.git</code> directory of the submodule. 
This leads to a confusion of git and it cannot track changes on the compiled website anymore.</p>
<p>I wrote some small custom <code>pre_build()</code> and <code>post_build()</code> hooks that moves the 
<code>.git</code> directory to a temp folder and restores it after a successfull build.</p>
<div class="pygments_monokai"><pre><span class="c">### Pre/Post build hooks:</span>
<span class="k">def</span> <span class="nf">pre_build</span><span class="p">():</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="s">&quot;_tmp&quot;</span><span class="p">):</span>
        <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s">&quot;_tmp&quot;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">rmtree</span><span class="p">(</span><span class="s">&quot;_tmp&quot;</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="s">&quot;_tmp&quot;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&quot;_site&quot;</span><span class="p">,</span><span class="s">&quot;.git&quot;</span><span class="p">)):</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&quot;_site&quot;</span><span class="p">,</span><span class="s">&quot;.git&quot;</span><span class="p">),</span><span class="s">&quot;_tmp&quot;</span><span class="p">)</span>    
    <span class="c">#Do whatever you want before the _site is built</span>
    <span class="k">pass</span>
<span class="k">def</span> <span class="nf">post_build</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&quot;_tmp&quot;</span><span class="p">,</span><span class="s">&quot;.git&quot;</span><span class="p">)):</span>
        <span class="n">shutil</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&quot;_tmp&quot;</span><span class="p">,</span><span class="s">&quot;.git&quot;</span><span class="p">),</span><span class="s">&quot;_site&quot;</span><span class="p">)</span>    
    <span class="c">#Do whatever you want after the _site is built</span>
</pre></div>

<p>Sadly, blogofile only invokes the <code>post_build()</code> hook when everything works fine. When you have an error 
in your templates blogofile only invokes the <code>pre_build()</code> hook. But destroying your submodule is no problem since you have it 
on GitHub! Just delete the <code>_site</code> folder and update the submodule with <code>git submodule update</code> in the root folder of your blogofile project.</p>
<h3>That's it!</h3>
<p>Quite cool, I think, because you don't need any webserver or webspace and still have quite a nice blog! 
As a start you can also fork my two github repos.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
