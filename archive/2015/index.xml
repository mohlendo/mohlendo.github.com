<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Manuel Ohlendorf</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://manuel-ohlendorf.de/archive/2015/</link>
    <language>en-us</language>
    <author>Manuel Ohlendorf</author>
    
    <updated>Tue, 29 Sep 2015 09:34:00 CEST</updated>
    
    
    <item>
      <title>The crazy date/time formatting in Go</title>
      <link>http://manuel-ohlendorf.de/blog/2015/09/29/the-crazy-date/time-formatting-in-go/</link>
      <pubDate>Tue, 29 Sep 2015 09:34:00 CEST</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/09/29/the-crazy-date/time-formatting-in-go/</guid>
      <description>&lt;p&gt;Formatting and parsing date/time strings is a very common use-case in programming. A lot of the programming languages I worked with take the same approach for that: Using the Unicode time pattern syntax &lt;a href=&#34;http://www.unicode.org/reports/tr35/#Date_Format_Patterns&#34;&gt;UTS #35&lt;/a&gt;. For me it is always hard to remember the details, especially when it comes to the upper and lower case codes.&lt;/p&gt;

&lt;p&gt;A typical format string in Java for an english date would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    EEE, MM/dd hh:mm:ssa yyyy ZZZ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly simple, but you have to remember that the month part is always upper case, the minute part is always lower case, 12-hour time is the lower case &lt;code&gt;hh&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is the am/pm marker, etc. There a several more pattern letters if you want to get more detailed on the time format.&lt;/p&gt;

&lt;p&gt;Go takes a completely new road to date/time formatting. Instead of codes it uses a standard time for describing the desired date/time format. The same date format as above written in Go is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Mon, 01/02 03:04:05PM 2006 -0700
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is a special time counting from one for the month part to six for the year part and seven for the time zone (which is MST). So there a only three things to recall: it starts with the month, the hour part is PM (15 o&amp;rsquo;clock in 24-hour time) and the day of the week is Monday - instead of all all those abstract time pattern letters.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s parse and format a simple date string from an english date format to the german date format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
    // my birthday
    value := &amp;quot;04/19/1979&amp;quot;
    // the format of the value
    parseFormat := &amp;quot;01/02/2006&amp;quot;

    // parse the string into a time object
    time, _ := time.Parse(parseFormat, value)

    // the german output format
    printFormat := &amp;quot;02.01.2006&amp;quot;

    // and print it with the desired format
    fmt.Println(time.Format(printFormat))
}

// =&amp;gt; &amp;quot;19.04.1979&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like this new approach of Go. Writing the standard time down the way yours looks may be strange in the first place, but it&amp;rsquo;s easy to recall, and it also happens to match the form of your time string, syntactically.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Material Design Buttons with AppCompat</title>
      <link>http://manuel-ohlendorf.de/blog/2015/09/03/material-design-buttons-with-appcompat/</link>
      <pubDate>Thu, 03 Sep 2015 10:21:06 CEST</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/09/03/material-design-buttons-with-appcompat/</guid>
      <description>&lt;p&gt;With the new release v23.0.0 of the AppCompat library it is now possible to create Material Design Buttons for Lollipop and Pre-Lollipop devices.&lt;/p&gt;

&lt;p&gt;If you just want to define the color of all Buttons you can set a special theme property called &lt;code&gt;colorButtonNormal&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;style name=&amp;quot;AppTheme&amp;quot; parent=&amp;quot;Theme.AppCompat.Light&amp;quot;&amp;gt;
  &amp;lt;item name=&amp;quot;android:windowBackground&amp;quot;&amp;gt;@android:color/white&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorPrimary&amp;quot;&amp;gt;@color/primary&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorPrimaryDark&amp;quot;&amp;gt;@color/primary_dark&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorAccent&amp;quot;&amp;gt;@color/accent&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorButtonNormal&amp;quot;&amp;gt;@color/button_normal&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every Button has the color &lt;code&gt;@color/button_normal&lt;/code&gt; and looks like a nice Material Design Button.
But what if you have different Button types with different colors? No problem! Just define a new style for your special button:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;style name=&amp;quot;SpecialButton&amp;quot; parent=&amp;quot;Widget.AppCompat.Button.Colored&amp;quot;&amp;gt;
  &amp;lt;item name=&amp;quot;colorButtonNormal&amp;quot;&amp;gt;#555&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;android:textColorPrimary&amp;quot;&amp;gt;#fff&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this style on a Button element like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;Button
  android:theme=&amp;quot;@style/SpecialButton&amp;quot;
  android:id=&amp;quot;@+id/special&amp;quot;
  android:layout_width=&amp;quot;wrap_content&amp;quot;
  android:layout_height=&amp;quot;wrap_content&amp;quot;
  android:text=&amp;quot;@string/special&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the style is not used as a style but as a theme. This is because the attributes &lt;code&gt;colorButtonNormal&lt;/code&gt; and &lt;code&gt;android:textColorPrimary&lt;/code&gt; are not properties of the Button. Instead they are applied by the &lt;em&gt;magic&lt;/em&gt; theme mechanism from Android. I am not entirely sure how it works but it seems to work&amp;hellip;&lt;/p&gt;

&lt;p&gt;For more information on styling and &lt;em&gt;not&lt;/em&gt; on theming you should read &lt;a href=&#34;http://blog.danlew.net/2014/11/19/styles-on-android/&#34;&gt;Styling Views on Android (Without Going Crazy)&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Using Hugo as the new static site generator</title>
      <link>http://manuel-ohlendorf.de/blog/2015/02/17/using-hugo-as-the-new-static-site-generator/</link>
      <pubDate>Tue, 17 Feb 2015 08:45:58 CET</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/02/17/using-hugo-as-the-new-static-site-generator/</guid>
      <description>&lt;p&gt;Four years since my last
&lt;a href=&#34;http://manuel-ohlendorf.de/blog/2011/03/14/l-system-parser-with-jangaroo/&#34;&gt;blogpost&lt;/a&gt; and a very crappy
old style of the site, I have decided completely revamp it.&lt;/p&gt;

&lt;p&gt;My first thoughts were: You need a new static site generator and it has to be
written in your favourite programming language (for now, this is JavaScript).
After some googling and tinkering I came to a very different conclusion: Not the
programming language or the features of the generator are important to me, but
the available themes!&lt;/p&gt;

&lt;p&gt;So more googling was necessary to come up with &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and the
theme &lt;a href=&#34;https://github.com/spf13/hyde&#34;&gt;Hyde&lt;/a&gt; and not 10 minutes later the new
site was online - yes, it was that fast!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; has every feature you would expect from a static site
generator: sitemap generation, RSS generation, serving and life-reloading during
development and a good documentation.&lt;/p&gt;

&lt;p&gt;But the most important feature for me is the very good theming mechanism that
allows you to use a theme as a git submodule in your project, without changing
any code in it. It is always possible to update the theme to the latest version
or even change it to a different one. Every style specific changes that you want
to make happen in your own templates.&lt;/p&gt;

&lt;p&gt;Another property of &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; that convinced me, is its
performance - Hugo is &lt;em&gt;blazing&lt;/em&gt; fast! Generating this site takes about 25
milliseconds.&lt;/p&gt;

&lt;p&gt;One thing, that bothered me was, that the Hugo&amp;rsquo;s documentation describes a very
complicated way of hosting the blog on &lt;a href=&#34;http://github.com&#34;&gt;Github&lt;/a&gt;. Therefor I
have chosen my submodule-way, again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; generates the final site into the &lt;code&gt;public&lt;/code&gt; folder. That
is where you want to init the
&lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html&#34;&gt;submodule&lt;/a&gt;
into:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add http://github.com/mohlendo/mohlendo.github.com public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time the site is rebuild, you can commit and push the changes to the
website repository and github will automatically publish them - in my case to
&lt;a href=&#34;http://mohlendo.github.com&#34;&gt;http://mohlendo.github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it again - a new site generator and a new blogpost! Probably the last,
though, until I change the site generator again&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>
