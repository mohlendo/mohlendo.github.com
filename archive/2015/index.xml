<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Manuel Ohlendorf</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://manuel-ohlendorf.de/archive/2015/index.xml</link>
    <language>en-us</language>
    <author>Manuel Ohlendorf</author>
    <copyright>0001 Manuel Ohlendorf</copyright>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    
    <item>
      <title>Sharing secrets with pass</title>
      <link>http://manuel-ohlendorf.de/blog/2015/11/13/sharing-secrets-with-pass/</link>
      <pubDate>Fri, 13 Nov 2015 20:11:00 &#43;0200</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/11/13/sharing-secrets-with-pass/</guid>
      <description>

&lt;p&gt;I don&amp;rsquo;t like password managers. I don&amp;rsquo;t trust them. But when you work in a small team and use a lot of different servers and technologies you sometimes have to securely store and share a secret with them.
There are a lot of password managers out there that can do that but I want a very simple command line tool that just uses standard technologies and —  &lt;em&gt;Tata&lt;/em&gt; — &lt;a href=&#34;http://www.passwordstore.org/&#34;&gt;Pass, the standard unix password manager&lt;/a&gt; hits the spot.&lt;/p&gt;

&lt;p&gt;The documentation is quite good and there are some helpful blogpost on how to setup &lt;code&gt;pass&lt;/code&gt;. But what I am missing is how to share the stored and encrypted passwords.&lt;/p&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;To setup &lt;code&gt;pass&lt;/code&gt;, you need a GnuPG key which &lt;code&gt;pass&lt;/code&gt; uses to encrypt all your secrets. Run the command and follow the instructions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --gen-key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should stick to the defaults recommended by GnuPG. Only for the key length I would choose 4096 bits instead of just 2048 bits because you can and bigger is better :-)&lt;/p&gt;

&lt;p&gt;After GnuPG has generated the key it prints the details to the key. One line should look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub   4096R/11223344 2009-07-17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to remember (copy into clipboard) the 8 character key id of the public key. Here it is &lt;code&gt;11223344&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can initialize your &lt;code&gt;pass&lt;/code&gt; password store with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pass init 11223344
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;pass&lt;/code&gt; you can use &lt;code&gt;git&lt;/code&gt; to track changes made to the password store and if you have a remote repository, you can also share the store with others. Let&amp;rsquo;s initialize the git repository with &lt;code&gt;pass&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pass git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add the remote URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pass git remote add origin kexec.com:pass-store
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since &lt;code&gt;pass&lt;/code&gt; just uses &lt;code&gt;git&lt;/code&gt; you don&amp;rsquo;t have to use &lt;code&gt;pass&lt;/code&gt; for managing the repository. You can also just use the bare &lt;code&gt;git&lt;/code&gt; command for that. The default path for the password store is &lt;code&gt;~/.password-store/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sharing&#34;&gt;Sharing&lt;/h3&gt;

&lt;p&gt;Now that you have a running &lt;code&gt;pass&lt;/code&gt; setup you can share that with others. For decrypting the secrets you have to export and share the public &lt;em&gt;and private&lt;/em&gt; GnuPG key that you just created.&lt;/p&gt;

&lt;p&gt;Keep in mind that anyone who has access to the key and knows the password of the key is able to decrypt all your passwords.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg -a --output gpg-secret-key.asc --export-secret-keys 11223344
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to provide a team member access to the password store she needs the exported key in the file &lt;code&gt;gpg-secret-key.asc&lt;/code&gt;, access to the &lt;code&gt;git&lt;/code&gt; remote repository holding the store and the password of the GnuPG key, of course.&lt;/p&gt;

&lt;p&gt;This is what the colleague has to do after installing &lt;code&gt;pass&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Import the key into her GnuPG installation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --import gpg-secret-key.asc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Increase the trust-level to maximum with the GnuPG editor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpg --edit-key 11223344
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, that you are in the interactive editor you have to enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gpg&amp;gt; trust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and type &lt;code&gt;5&lt;/code&gt; for ultimate trust, then confirm with &lt;code&gt;y&lt;/code&gt; and enter &lt;code&gt;quit&lt;/code&gt; to exit.
The final step is to clone the &lt;code&gt;git&lt;/code&gt; repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone kexec.com:pass-store ~/.password-store/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your colleague is now able to decrypt all passwords and add new ones.&lt;/p&gt;

&lt;h3 id=&#34;security-considerations&#34;&gt;Security Considerations&lt;/h3&gt;

&lt;p&gt;Sharing the &lt;code&gt;pass&lt;/code&gt; password store has some security issues that you should be aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be careful when giving the public/private GnuPG key and password away. In the wrong hands, everything is lost. You shouldn&amp;rsquo;t use E-Mail for that. A USB-Drive that is securely wiped clear after sharing the key should do the trick.&lt;/li&gt;
&lt;li&gt;you should also keep the &lt;code&gt;git&lt;/code&gt; repository hidden and secure. Pass uses simple files to store the encrypted passwords and the filenames are clear. An attacker with access to the &lt;code&gt;git&lt;/code&gt; repository is able to see the clear names of your encrypted passwords and might drew some dangerous conclusions from that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please keep that in mind and don&amp;rsquo;t blame me later ;-)&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The crazy date/time formatting in Go</title>
      <link>http://manuel-ohlendorf.de/blog/2015/09/29/the-crazy-date/time-formatting-in-go/</link>
      <pubDate>Tue, 29 Sep 2015 09:34:00 CEST</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/09/29/the-crazy-date/time-formatting-in-go/</guid>
      <description>&lt;p&gt;Formatting and parsing date/time strings is a very common use-case in programming. A lot of the programming languages I worked with take the same approach for that: Using the Unicode time pattern syntax &lt;a href=&#34;http://www.unicode.org/reports/tr35/#Date_Format_Patterns&#34;&gt;UTS #35&lt;/a&gt;. For me it is always hard to remember the details, especially when it comes to the upper and lower case codes.
&lt;/p&gt;

&lt;p&gt;A typical format string in Java for an english date would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    EEE, MM/dd hh:mm:ssa yyyy ZZZ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly simple, but you have to remember that the month part is always upper case, the minute part is always lower case, 12-hour time is the lower case &lt;code&gt;hh&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is the am/pm marker, etc. There a several more pattern letters if you want to get more detailed on the time format.&lt;/p&gt;

&lt;p&gt;Go takes a completely new road to date/time formatting. Instead of codes it uses a standard time for describing the desired date/time format. The same date format as above written in Go is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Mon, 01/02 03:04:05PM 2006 -0700
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is a special time counting from one for the month part to six for the year part and seven for the time zone (which is MST). So there a only three things to recall: it starts with the month, the hour part is PM (15 o&amp;rsquo;clock in 24-hour time) and the day of the week is Monday - instead of all all those abstract time pattern letters.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s parse and format a simple date string from an english date format to the german date format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
    // my birthday
    value := &amp;quot;04/19/1979&amp;quot;
    // the format of the value
    parseFormat := &amp;quot;01/02/2006&amp;quot;

    // parse the string into a time object
    time, _ := time.Parse(parseFormat, value)

    // the german output format
    printFormat := &amp;quot;02.01.2006&amp;quot;

    // and print it with the desired format
    fmt.Println(time.Format(printFormat))
}

// =&amp;gt; &amp;quot;19.04.1979&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like this new approach of Go. Writing the standard time down the way yours looks may be strange in the first place, but it&amp;rsquo;s easy to recall, and it also happens to match the form of your time string, syntactically.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Material Design Buttons with AppCompat</title>
      <link>http://manuel-ohlendorf.de/blog/2015/09/03/material-design-buttons-with-appcompat/</link>
      <pubDate>Thu, 03 Sep 2015 10:21:06 CEST</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/09/03/material-design-buttons-with-appcompat/</guid>
      <description>&lt;p&gt;With the new release v23.0.0 of the AppCompat library it is now possible to create Material Design Buttons for Lollipop and Pre-Lollipop devices.
&lt;/p&gt;

&lt;p&gt;If you just want to define the color of all Buttons you can set a special theme property called &lt;code&gt;colorButtonNormal&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;style name=&amp;quot;AppTheme&amp;quot; parent=&amp;quot;Theme.AppCompat.Light&amp;quot;&amp;gt;
  &amp;lt;item name=&amp;quot;android:windowBackground&amp;quot;&amp;gt;@android:color/white&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorPrimary&amp;quot;&amp;gt;@color/primary&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorPrimaryDark&amp;quot;&amp;gt;@color/primary_dark&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorAccent&amp;quot;&amp;gt;@color/accent&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;colorButtonNormal&amp;quot;&amp;gt;@color/button_normal&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every Button has the color &lt;code&gt;@color/button_normal&lt;/code&gt; and looks like a nice Material Design Button.
But what if you have different Button types with different colors? No problem! Just define a new style for your special button:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;style name=&amp;quot;SpecialButton&amp;quot; parent=&amp;quot;Widget.AppCompat.Button.Colored&amp;quot;&amp;gt;
  &amp;lt;item name=&amp;quot;colorButtonNormal&amp;quot;&amp;gt;#555&amp;lt;/item&amp;gt;
  &amp;lt;item name=&amp;quot;android:textColorPrimary&amp;quot;&amp;gt;#fff&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use this style on a Button element like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;Button
  android:theme=&amp;quot;@style/SpecialButton&amp;quot;
  android:id=&amp;quot;@+id/special&amp;quot;
  android:layout_width=&amp;quot;wrap_content&amp;quot;
  android:layout_height=&amp;quot;wrap_content&amp;quot;
  android:text=&amp;quot;@string/special&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the style is not used as a style but as a theme. This is because the attributes &lt;code&gt;colorButtonNormal&lt;/code&gt; and &lt;code&gt;android:textColorPrimary&lt;/code&gt; are not properties of the Button. Instead they are applied by the &lt;em&gt;magic&lt;/em&gt; theme mechanism from Android. I am not entirely sure how it works but it seems to work&amp;hellip;&lt;/p&gt;

&lt;p&gt;For more information on styling and &lt;em&gt;not&lt;/em&gt; on theming you should read &lt;a href=&#34;http://blog.danlew.net/2014/11/19/styles-on-android/&#34;&gt;Styling Views on Android (Without Going Crazy)&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Using Hugo as the new static site generator</title>
      <link>http://manuel-ohlendorf.de/blog/2015/02/17/using-hugo-as-the-new-static-site-generator/</link>
      <pubDate>Tue, 17 Feb 2015 08:45:58 CET</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/02/17/using-hugo-as-the-new-static-site-generator/</guid>
      <description>&lt;p&gt;Four years since my last
&lt;a href=&#34;http://manuel-ohlendorf.de/blog/2011/03/14/l-system-parser-with-jangaroo/&#34;&gt;blogpost&lt;/a&gt; and a very crappy
old style of the site, I have decided completely revamp it.&lt;/p&gt;

&lt;p&gt;My first thoughts were: You need a new static site generator and it has to be
written in your favourite programming language (for now, this is JavaScript).
After some googling and tinkering I came to a very different conclusion: Not the
programming language or the features of the generator are important to me, but
the available themes!&lt;/p&gt;

&lt;p&gt;So more googling was necessary to come up with &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and the
theme &lt;a href=&#34;https://github.com/spf13/hyde&#34;&gt;Hyde&lt;/a&gt; and not 10 minutes later the new
site was online - yes, it was that fast!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; has every feature you would expect from a static site
generator: sitemap generation, RSS generation, serving and life-reloading during
development and a good documentation.&lt;/p&gt;

&lt;p&gt;But the most important feature for me is the very good theming mechanism that
allows you to use a theme as a git submodule in your project, without changing
any code in it. It is always possible to update the theme to the latest version
or even change it to a different one. Every style specific changes that you want
to make happen in your own templates.&lt;/p&gt;

&lt;p&gt;Another property of &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; that convinced me, is its
performance - Hugo is &lt;em&gt;blazing&lt;/em&gt; fast! Generating this site takes about 25
milliseconds.&lt;/p&gt;

&lt;p&gt;One thing, that bothered me was, that the Hugo&amp;rsquo;s documentation describes a very
complicated way of hosting the blog on &lt;a href=&#34;http://github.com&#34;&gt;Github&lt;/a&gt;. Therefor I
have chosen my submodule-way, again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; generates the final site into the &lt;code&gt;public&lt;/code&gt; folder. That
is where you want to init the
&lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html&#34;&gt;submodule&lt;/a&gt;
into:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add http://github.com/mohlendo/mohlendo.github.com public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time the site is rebuild, you can commit and push the changes to the
website repository and github will automatically publish them - in my case to
&lt;a href=&#34;http://mohlendo.github.com&#34;&gt;http://mohlendo.github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it again - a new site generator and a new blogpost! Probably the last,
though, until I change the site generator again&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>
