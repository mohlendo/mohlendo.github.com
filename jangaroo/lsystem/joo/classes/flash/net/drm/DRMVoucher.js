joo.classLoader.prepare("package flash.net.drm",/* {*/


/**
 * The DRMVoucher class is a handle to the license token that allows a user to view DRM-protected content.
 * <p>The DRMVoucher properties describe the viewing rights conferred by the voucher. You can get a voucher using the <code>loadVoucher()</code> method of the DRMManager object. This method requires a DRMContentData object, obtained with the <code>preloadEmbeddedMetadata()</code> method of the NetStream class (AIR only) or by using the <code>DRMContentData()</code> constructor. When using a media rights server such as Flash Access, you can get a DRMContentData object from the metadata generated by the media packager tool.</p>
 * @see DRMContentData
 * @see DRMManager#loadVoucher()
 * @see flash.net.NetStream#preloadEmbeddedData()
 *
 */
"public class DRMVoucher",1,function($$private){;return[ 
  /**
   * The date and time at which this voucher expires for offline playback.
   * <p>If a voucher is only valid for the current online session, <code>offlineLeaseStartDate</code> is <code>null</code>.</p>
   */
  "public function get offlineLeaseEndDate",function offlineLeaseEndDate$get()/*:Date*/ {
    throw new Error('not implemented'); // TODO: implement!
  },

  /**
   * The date and time at which this voucher becomes valid for offline playback.
   * <p>If a voucher is only valid for the current online session, <code>offlineLeaseStartDate</code> is <code>null</code>.</p>
   */
  "public function get offlineLeaseStartDate",function offlineLeaseStartDate$get()/*:Date*/ {
    throw new Error('not implemented'); // TODO: implement!
  },

  /**
   * The time period, after the first viewing, during which the associated content can be viewed or reviewed.
   * <p>The time period allotted for viewing begins when the user first views the content and ends after the allotted amount of time has elapsed. If no time is allotted, the value of the <code>playbackTimeWindow</code> property is <code>null</code>.</p>
   */
  "public function get playbackTimeWindow",function playbackTimeWindow$get()/*:DRMPlaybackTimeWindow*/ {
    throw new Error('not implemented'); // TODO: implement!
  },

  /**
   * A dynamic object that reports policies defined by the application.
   * <p>The policy object contains a name-value pair for each policy in effect.</p>
   */
  "public function get policies",function policies$get()/*:Object*/ {
    throw new Error('not implemented'); // TODO: implement!
  },

  /**
   * The date on which this voucher expires.
   */
  "public function get voucherEndDate",function voucherEndDate$get()/*:Date*/ {
    throw new Error('not implemented'); // TODO: implement!
  },

  /**
   * The beginning of this voucher's validity period.
   */
  "public function get voucherStartDate",function voucherStartDate$get()/*:Date*/ {
    throw new Error('not implemented'); // TODO: implement!
  },
];},[],["Error"], "0.8.0", "0.9.6"
);