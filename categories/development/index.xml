<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Manuel Ohlendorf</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/development/</link>
    <language>en-us</language>
    <author>Manuel Ohlendorf</author>
    
    <updated>Tue, 17 Feb 2015 08:45:58 CET</updated>
    
    
    <item>
      <title>Using Hugo as the new static site generator</title>
      <link>http://localhost:1313/blog/2015/02/17/using-hugo-as-the-new-static-site-generator/</link>
      <pubDate>Tue, 17 Feb 2015 08:45:58 CET</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://localhost:1313/blog/2015/02/17/using-hugo-as-the-new-static-site-generator/</guid>
      <description>&lt;p&gt;Four years since my last
&lt;a href=&#34;http://localhost:1313/blog/2011/03/14/l-system-parser-with-jangaroo/&#34;&gt;blogpost&lt;/a&gt; and a very crappy
old style of the site, I have decided completely revamp it.&lt;/p&gt;

&lt;p&gt;My first thoughts were: You need a new static site generator and it has to be
written in your favourite programming language (for now, this is JavaScript).
After some googling and tinkering I came to a very different conclusion: Not the
programming language or the features of the generator are important to me, but
the available themes!&lt;/p&gt;

&lt;p&gt;So more googling was necessary to come up with &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and the
theme &lt;a href=&#34;https://github.com/spf13/hyde&#34;&gt;Hyde&lt;/a&gt; and not 10 minutes later the new
site was online - yes, it was that fast!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; has every feature you would expect from a static site
generator: sitemap generation, RSS generation, serving and life-reloading during
development and a good documentation.&lt;/p&gt;

&lt;p&gt;But the most important feature for me is the very good theming mechanism that
allows you to use a theme as a git submodule in your project, without changing
any code in it. It is always possible to update the theme to the latest version
or even change it to a different one. Every style specific changes that you want
to make happen in your own templates.&lt;/p&gt;

&lt;p&gt;Another property of &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; that convinced me, is its
performance - Hugo is &lt;em&gt;blazing&lt;/em&gt; fast! Generating this site takes about 25
milliseconds.&lt;/p&gt;

&lt;p&gt;One thing, that bothered me was, that the Hugo&amp;rsquo;s documentation describes a very
complicated way of hosting the blog on &lt;a href=&#34;http://github.com&#34;&gt;Github&lt;/a&gt;. Therefor I
have chosen my submodule-way, again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; generates the final site into the &lt;code&gt;public&lt;/code&gt; folder. That
is where you want to init the
&lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html&#34;&gt;submodule&lt;/a&gt;
into:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add http://github.com/mohlendo/mohlendo.github.com public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time the site is rebuild, you can commit and push the changes to the
website repository and github will automatically publish them - in my case to
&lt;a href=&#34;http://mohlendo.github.com&#34;&gt;http://mohlendo.github.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it again - a new site generator and a new blogpost! Probably the last,
though, until I change the site generator again&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>L-System parser with Jangaroo</title>
      <link>http://localhost:1313/blog/2011/03/14/l-system-parser-with-jangaroo/</link>
      <pubDate>Mon, 14 Mar 2011 16:44:03 UTC</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://localhost:1313/blog/2011/03/14/l-system-parser-with-jangaroo/</guid>
      <description>&lt;p&gt;Have you ever heard of &lt;a href=&#34;http://www.jangaroo.net&#34;&gt;Jangaroo&lt;/a&gt;? It is an ActionScript&amp;reg;-to-Javascript compiler. It&#39;s an open-source project with an implementation of the Flash&amp;reg; API and the whole toolchain every programmer likes: Maven dependency management, good IDE support, TDD with JooUnit (a port of FlexUnit) and a lot more. It even comes with a declarative UI language EXML (well, it is quite similar to MXML), that can be used to generate &lt;a href=&#34;http://www.sencha.com/products/extjs/&#34;&gt;ExtJS&lt;/a&gt; applications. For about a year I am now also helping to evolve Jangaroo and its toolchain.&lt;/p&gt;
&lt;p&gt;Once upon the time when Adobe&amp;reg; Flex was the next big thing, I was very much impressed by this cool technology. I developed an UI during a professional project with Flex 3 and was a beta tester for Adobe&amp;reg; Flex 4 and all the tools that came with it like FlexBuilder and Thermo. Back then I wrote a little &lt;a href=&#34;http://en.wikipedia.org/wiki/L-system&#34;&gt;Lindenmayer system&lt;/a&gt; parser with a Flex 4 UI: &lt;a href=&#34;https://github.com/mohlendo/lsystem&#34;&gt;lsystem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below you see some &lt;a href=&#34;http://en.wikipedia.org/wiki/L-system&#34;&gt;Lindenmayer systems&lt;/a&gt; that are generated with the Jangaroo version of the original Flash&amp;reg; lsystem parser. It is still the same code, but the program now completely runs in the browser &amp;ndash; without any plugin and only with HTML5. The code can be found here: &lt;a href=&#34;https://github.com/mohlendo/lsystem-jangaroo&#34;&gt;lsystem-jangaroo&lt;/a&gt;.&lt;/p&gt;

&lt;iframe id=&#34;lsystem1&#34; src=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=1&#34; frameborder=&#34;0&#34; width=&#34;640&#34; height=&#34;480&#34;&gt;
    no frames
&lt;/iframe&gt;
&lt;iframe id=&#34;lsystem2&#34; src=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=2&#34; frameborder=&#34;0&#34; width=&#34;640&#34; height=&#34;480&#34;&gt;
    no frames
&lt;/iframe&gt;
&lt;p&gt;All in all there are 10 Lsystem presets that can be viewed with my litte program:
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=0&#34; target=&#34;_blank&#34;&gt;Lsystema vulgaris&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=1&#34; target=&#34;_blank&#34;&gt;Tree 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=2&#34; target=&#34;_blank&#34;&gt;Tree 2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=3&#34; target=&#34;_blank&#34;&gt;Tree 3&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=4&#34; target=&#34;_blank&#34;&gt;Koch curve&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=5&#34; target=&#34;_blank&#34;&gt;Quad Koch island&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=6&#34; target=&#34;_blank&#34;&gt;Hilber curve&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=7&#34; target=&#34;_blank&#34;&gt;Sierpinski Arrowhead&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=8&#34; target=&#34;_blank&#34;&gt;Dragon curve&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=9&#34; target=&#34;_blank&#34;&gt;LÃ©vy C curve&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://localhost:1313/jangaroo/lsystem/lsystem.html?lsystem=10&#34; target=&#34;_blank&#34;&gt;Penrose Tiling P3&lt;/a&gt; Warning! This may crash your browser!&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Hosting a Blogofile Blog on GitHub with GitHub Pages</title>
      <link>http://localhost:1313/blog/2010/12/23/hosting-a-blogofile-blog-on-github-with-github-pages/</link>
      <pubDate>Thu, 23 Dec 2010 13:09:03 UTC</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://localhost:1313/blog/2010/12/23/hosting-a-blogofile-blog-on-github-with-github-pages/</guid>
      <description>

&lt;p&gt;So, in my first blog post I will describe howto use
&lt;a href=&#34;http://www.github.com&#34;&gt;GitHub&lt;/a&gt; to serve a &lt;a href=&#34;http://www.blogofile.com&#34;&gt;Blogofile&lt;/a&gt;
Blog, which I have done with this blog. ### First, what is
&lt;a href=&#34;http://www.blogofile.com&#34;&gt;Blogofile&lt;/a&gt;? Blogofile is a framework for static
websites. You don&amp;rsquo;t need a webserver and no database, only webspace. Blogofile
provides templates, controllers and filters, almost like any other dynamic web
frameworks and compiles them to a static website. Right now it is more or less a
blogging engine but you can actually create any website you want. Have a look at
the website for details.&lt;/p&gt;

&lt;p&gt;And there comes &lt;a href=&#34;http://www.github.com&#34;&gt;GitHub&lt;/a&gt; into the play.
&lt;a href=&#34;http://www.github.com&#34;&gt;GitHub&lt;/a&gt; provides with &lt;a href=&#34;http://pages.github.com/&#34;&gt;GitHub
Pages&lt;/a&gt; a very simple way of publishing content to the
web. So why not using &lt;a href=&#34;http://www.github.com&#34;&gt;GitHub&lt;/a&gt; for serving your blogofile
website.&lt;/p&gt;

&lt;h3 id=&#34;github-setup:1e5a439a674e6273b2b26fe741d14769&#34;&gt;Github setup&lt;/h3&gt;

&lt;p&gt;You need 2 public repositories for that, the source code repository and the
website repository that contains the compiled pages. My two repos are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/mohlendo/manuel-ohlendorf.de&#34;&gt;http://github.com/mohlendo/manuel-ohlendorf.de&lt;/a&gt; with the source code&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/mohlendo/mohlendo.github.com&#34;&gt;http://github.com/mohlendo/mohlendo.github.com&lt;/a&gt; with the compiled HTML files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The later one is a special repository for user pages published with &lt;a href=&#34;http://pages.github.com/&#34;&gt;GitHub
Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;git-setup:1e5a439a674e6273b2b26fe741d14769&#34;&gt;Git setup&lt;/h3&gt;

&lt;p&gt;The whole source code of your website with the Mako templates etc. will be
pushed to the source code repository. The command &lt;code&gt;blogofile build&lt;/code&gt; compiles the
website into the sub-folder &lt;code&gt;_site&lt;/code&gt;. The contents of this directory is what we
want to push to the website repository which GitHub will publish to the web. In
order to do that we need to create a git
&lt;a href=&#34;http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html&#34;&gt;submodule&lt;/a&gt;
with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add http://github.com/mohlendo/mohlendo.github.com _site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That creates a new submodule &lt;code&gt;_site&lt;/code&gt;. Now every time the site is rebuild, you
can commit and push the changes to the website repository and github will
automatically publish them - in my case to
&lt;a href=&#34;http://mohlendo.github.com&#34;&gt;http://mohlendo.github.com&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;config-py-changes:1e5a439a674e6273b2b26fe741d14769&#34;&gt;_config.py changes&lt;/h3&gt;

&lt;p&gt;Every time blogofile recreates the website it completely clears the &lt;code&gt;_site&lt;/code&gt;
directory and therefor also the &lt;code&gt;.git&lt;/code&gt; directory of the submodule. This leads to
a confusion of git and it cannot track changes on the compiled website anymore.&lt;/p&gt;

&lt;p&gt;I wrote some small custom &lt;code&gt;pre_build()&lt;/code&gt; and &lt;code&gt;post_build()&lt;/code&gt; hooks that moves the
&lt;code&gt;.git&lt;/code&gt; directory to a temp folder and restores it after a successful build.&lt;/p&gt;

&lt;h3 id=&#34;pre-post-build-hooks:1e5a439a674e6273b2b26fe741d14769&#34;&gt;Pre/Post build hooks:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def pre_build():
    if not os.path.isdir(&amp;quot;_tmp&amp;quot;):
        os.mkdir(&amp;quot;_tmp&amp;quot;)
    else:
        shutil.rmtree(&amp;quot;_tmp&amp;quot;)
        os.mkdir(&amp;quot;_tmp&amp;quot;)
    if os.path.isdir(os.path.join(&amp;quot;_site&amp;quot;,&amp;quot;.git&amp;quot;)):
        shutil.move(os.path.join(&amp;quot;_site&amp;quot;,&amp;quot;.git&amp;quot;),&amp;quot;_tmp&amp;quot;)
    #Do whatever you want before the _site is built
    pass
def post_build():
    if os.path.isdir(os.path.join(&amp;quot;_tmp&amp;quot;,&amp;quot;.git&amp;quot;)):
        shutil.move(os.path.join(&amp;quot;_tmp&amp;quot;,&amp;quot;.git&amp;quot;),&amp;quot;_site&amp;quot;)
    #Do whatever you want after the _site is built
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sadly, blogofile only invokes the &lt;code&gt;post_build()&lt;/code&gt; hook when everything works
fine. When you have an error in your templates blogofile only invokes the
&lt;code&gt;pre_build()&lt;/code&gt; hook. But destroying your submodule is no problem since you have
it on GitHub! Just delete the &lt;code&gt;_site&lt;/code&gt; folder and update the submodule with &lt;code&gt;git
submodule update&lt;/code&gt; in the root folder of your blogofile project.&lt;/p&gt;

&lt;h3 id=&#34;that-s-it:1e5a439a674e6273b2b26fe741d14769&#34;&gt;That&amp;rsquo;s it!&lt;/h3&gt;

&lt;p&gt;Quite cool, I think, because you don&amp;rsquo;t need any webserver or webspace and still
have quite a nice blog! As a start you can also fork my two github repos.&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>
