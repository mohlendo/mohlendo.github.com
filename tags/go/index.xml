<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Manuel Ohlendorf</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://manuel-ohlendorf.de/tags/go/index.xml</link>
    <language>en-us</language>
    <author>Manuel Ohlendorf</author>
    <copyright>0001 Manuel Ohlendorf</copyright>
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    
    <item>
      <title>The crazy date/time formatting in Go</title>
      <link>http://manuel-ohlendorf.de/blog/2015/09/29/the-crazy-date/time-formatting-in-go/</link>
      <pubDate>Tue, 29 Sep 2015 09:34:00 CEST</pubDate>
      <author>Manuel Ohlendorf</author>
      <guid>http://manuel-ohlendorf.de/blog/2015/09/29/the-crazy-date/time-formatting-in-go/</guid>
      <description>&lt;p&gt;Formatting and parsing date/time strings is a very common use-case in programming. A lot of the programming languages I worked with take the same approach for that: Using the Unicode time pattern syntax &lt;a href=&#34;http://www.unicode.org/reports/tr35/#Date_Format_Patterns&#34;&gt;UTS #35&lt;/a&gt;. For me it is always hard to remember the details, especially when it comes to the upper and lower case codes.
&lt;/p&gt;

&lt;p&gt;A typical format string in Java for an english date would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    EEE, MM/dd hh:mm:ssa yyyy ZZZ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fairly simple, but you have to remember that the month part is always upper case, the minute part is always lower case, 12-hour time is the lower case &lt;code&gt;hh&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is the am/pm marker, etc. There a several more pattern letters if you want to get more detailed on the time format.&lt;/p&gt;

&lt;p&gt;Go takes a completely new road to date/time formatting. Instead of codes it uses a standard time for describing the desired date/time format. The same date format as above written in Go is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Mon, 01/02 03:04:05PM 2006 -0700
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is a special time counting from one for the month part to six for the year part and seven for the time zone (which is MST). So there a only three things to recall: it starts with the month, the hour part is PM (15 o&amp;rsquo;clock in 24-hour time) and the day of the week is Monday - instead of all all those abstract time pattern letters.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s parse and format a simple date string from an english date format to the german date format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;time&amp;quot;
)

func main() {
    // my birthday
    value := &amp;quot;04/19/1979&amp;quot;
    // the format of the value
    parseFormat := &amp;quot;01/02/2006&amp;quot;

    // parse the string into a time object
    time, _ := time.Parse(parseFormat, value)

    // the german output format
    printFormat := &amp;quot;02.01.2006&amp;quot;

    // and print it with the desired format
    fmt.Println(time.Format(printFormat))
}

// =&amp;gt; &amp;quot;19.04.1979&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like this new approach of Go. Writing the standard time down the way yours looks may be strange in the first place, but it&amp;rsquo;s easy to recall, and it also happens to match the form of your time string, syntactically.&lt;/p&gt;</description>
    </item>
    
    
  </channel>
</rss>
